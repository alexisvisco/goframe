#!/usr/bin/env bash
#
# goframe - Go CLI Build and Execute Script
#
# DESCRIPTION:
#   This script automatically builds and executes a Go CLI application from a project
#   containing a go.mod file. It uses intelligent caching to avoid unnecessary rebuilds.
#
# BEHAVIOR:
#   1. Searches for go.mod file starting from current directory, traversing up the tree
#   2. Extracts the module name from go.mod and generates a SHA256 hash for caching
#   3. Creates a cache directory at ~/.goframe/<module_name_hash>/
#   4. Builds the CLI binary from cmd/cli/main.go if:
#      - No cached binary exists
#      - Any relevant source files have changed (checksum comparison)
#   5. Executes the cached binary with all provided arguments
#
# CACHE STRUCTURE:
#   ~/.goframe/<module_name_hash>/
#   ├── bin/goframe              # Compiled binary
#   └── sources_checksum         # SHA256 checksum of all relevant source files
#
# BUILD PROCESS:
#   - Attempts to build with 'go build'
#   - If build fails, runs 'go mod tidy' and retries
#   - Updates checksum file after successful build
#
# REQUIREMENTS:
#   - Go project with go.mod file
#   - CLI main file at cmd/cli/main.go relative to go.mod
#   - Standard Go build tools (go, sha256sum, awk)

set -euo pipefail

find_go_mod() {
    local dir="$PWD"
    while [[ "$dir" != "/" ]]; do
        if [[ -f "$dir/go.mod" ]]; then
            cat "$dir/go.mod"
            return 0
        fi
        dir="$(dirname "$dir")"
    done
    echo "No go.mod found"
    return 1
}

# Get the root folder containing go.mod
get_go_root() {
    local dir="$PWD"
    while [[ "$dir" != "/" ]]; do
        if [[ -f "$dir/go.mod" ]]; then
            echo "$dir"
            return 0
        fi
        dir="$(dirname "$dir")"
    done
    echo "No go.mod found"
    return 1
}

# Get relative path (cross-platform)
get_relative_path() {
    local target="$1"
    local base="$2"

    # Convert to absolute paths
    target=$(cd "$(dirname "$target")" && pwd)/$(basename "$target")
    base=$(cd "$base" && pwd)

    # Remove base path from target
    echo "${target#$base/}"
}

# Calculate SHA256 checksum (cross-platform)
calculate_sha256() {
    local file="$1"
    if command -v sha256sum >/dev/null 2>&1; then
        sha256sum "$file" | awk '{print $1}'
    elif command -v shasum >/dev/null 2>&1; then
        shasum -a 256 "$file" | awk '{print $1}'
    else
        echo "Error: No SHA256 utility found (sha256sum or shasum)" >&2
        exit 1
    fi
}

# Calculate checksum of all relevant source files
calculate_sources_checksum() {
    local go_root="$1"
    local temp_file=$(mktemp)

    # Find all relevant files that could affect the CLI generation
    find "$go_root" -type f \( \
        -name "*.go" -o \
        -name "*.yml" -o \
        -name "*.yaml" -o \
        -name "*.sql" -o \
        -name "go.mod" -o \
        -name "go.sum" \
    \) \
    -not -path "*/.*" \
    -not -path "*/node_modules/*" \
    -not -path "*/vendor/*" \
    -not -path "*/tmp/*" \
    -not -path "*/temp/*" \
    -not -path "*/_build/*" \
    -not -path "*/dist/*" \
    -not -path "*/docs/.next/*" \
    -not -path "*/docs/node_modules/*" \
    | sort | while read -r file; do
        # Get relative path and file hash
        rel_path=$(get_relative_path "$file" "$go_root")
        file_hash=$(calculate_sha256 "$file")
        echo "$rel_path:$file_hash"
    done > "$temp_file"

    # Calculate final checksum of all file hashes
    calculate_sha256 "$temp_file"
    rm "$temp_file"
}

GOMOD=$(find_go_mod | awk '/^module / {print $2; exit}')
SHA256_GOMOD=$(echo -n "$GOMOD" | sha256sum | awk '{print $1}')
GO_ROOT=$(get_go_root)

# Create a dir in the home that is correlated to the go module name sha256
mkdir -p "$HOME/.goframe/$SHA256_GOMOD"

# Path to the CLI main file and checksum file
CLI_MAIN_FILE="$GO_ROOT/cmd/cli/main.go"
CHECKSUM_FILE="$HOME/.goframe/$SHA256_GOMOD/sources_checksum"

# Function to build the binary
build_binary() {
    cd "$GO_ROOT"

    # Try to build first
    if ! go build -o "$HOME/.goframe/$SHA256_GOMOD/bin/goframe" "$CLI_MAIN_FILE"; then
        go mod tidy
        if ! go build -o "$HOME/.goframe/$SHA256_GOMOD/bin/goframe" "$CLI_MAIN_FILE"; then
            echo "Build failed even after go mod tidy"
            exit 1
        fi
    fi

    # Update the checksum after successful build
    calculate_sources_checksum "$GO_ROOT" > "$CHECKSUM_FILE"
}

# Check if cmd/cli/main.go exists
if [[ ! -f "$CLI_MAIN_FILE" ]]; then
    echo "Warning: cmd/cli/main.go not found at $CLI_MAIN_FILE"
    exit 1
fi

# Calculate current sources checksum
CURRENT_CHECKSUM=$(calculate_sources_checksum "$GO_ROOT")

# Check if we need to rebuild
NEED_REBUILD=false

if [[ ! -f "$HOME/.goframe/$SHA256_GOMOD/bin/goframe" ]]; then
    NEED_REBUILD=true
elif [[ ! -f "$CHECKSUM_FILE" ]]; then
    NEED_REBUILD=true
elif [[ "${NOCACHE:-}" == "true" ]]; then
    NEED_REBUILD=true
else
    STORED_CHECKSUM=$(cat "$CHECKSUM_FILE")
    if [[ "$CURRENT_CHECKSUM" != "$STORED_CHECKSUM" ]]; then
        NEED_REBUILD=true
    fi
fi

if [[ "$NEED_REBUILD" == "true" ]]; then
    build_binary
fi

# Execute the CLI binary
if [[ -f "$HOME/.goframe/$SHA256_GOMOD/bin/goframe" ]]; then
    exec "$HOME/.goframe/$SHA256_GOMOD/bin/goframe" "$@"
else
    echo "goframe binary not found or build failed"
    exit 1
fi
